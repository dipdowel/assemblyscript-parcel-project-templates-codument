// @ts-ignore
import { initWasm } from "../assembly/index.as";

// `WasmModule` is autogenerated and provides the shape of your WASM module to the TypeScript part of your application
import { WasmModule } from "./wasm-module";

import { getElementSizeRange } from "./lib/get-element-size-range";
import { CanvasSizeDescriptor } from "./lib/types";
import { getElementSize } from "./lib/get-element-size";
import { initPongApp, resizePongApp, switchModePongApp } from "./pong-app";

// minimum and maximum allowed canvas sizes, derived from the CSS
const canvasSizeRange = getElementSizeRange("screen");

(async () => {
  try {
    // Initialise the WASM module
    const wasm: WasmModule = await initWasm();

    // Contains the minimum and maximum allowed canvas sizes
    // and also actual canvas size in pixels
    const canvasSizeDescriptor: CanvasSizeDescriptor = {
      ...canvasSizeRange,
      ...getElementSize("screen"),
    };

    initPongApp(wasm, canvasSizeDescriptor);
  } catch (error) {
    console.error("An error occurred:", error);
  }
})();

window.onresize = ():void => {
  const screen = document.getElementById("screen");
  const { clientWidth, clientHeight } = screen;
  resizePongApp(clientWidth, clientHeight);
};


const screen = document.getElementById("screen")

screen.ontouchstart = ():void => {
  switchModePongApp();
};


screen.onclick = (event: MouseEvent):void => {
// Register only left-button mouse clicks
  if (event.button === 0) {
    switchModePongApp();
  }
};
//
// window.onmousedown = (event: MouseEvent) => {
//   // Register only left-button mouse clicks
//   if (event.button === 0) {
//     switchModePongApp();
//   }
// };
